task('Install components');
task('install', { async: true }, function () {
  jake.exec('component install', { printStdout: true }, function () {
    console.log('install success!');
    complete();
  });
});

var templatesGlobStr = 'lib/*/*.html';

task('Convert templates');
task('convert', { async: true }, function () {
  var glob = require('glob');
  var cmd = 'component convert ';
  var cmds = glob.sync(templatesGlobStr).map(function (file) {
    return cmd + file;
  });
  jake.exec(cmds, { printStdout: true }, function () {
    console.log('convert success!');
    complete();
  });
});

desc('Build components');
task('build', ['install', 'convert'], { async: true }, function () {
  jake.exec('component build -v --dev', { printStdout: true }, function () {
    console.log('build success!');
    complete();
  });
});

task('Clean generated stuff');
task('clean', { async: true }, function () {
  var glob = require('glob');
  var cmd = 'rm -rf ';
  var cmds = [cmd + 'components'];
  cmds = cmds.concat(glob.sync(templatesGlobStr).map(function (file) {
    return cmd + file.replace('.html', '.js');
  }));
  jake.exec(cmds, { printStdout: true }, function () {
    console.log('clean success!');
    complete();
  })
});

task('minify', { async: true }, function () {
  var Builder = require('component-builder');
  var minify  = require('component-minify');
  var fs = require('fs');
  var path = require('path');
  var mkdir = require('mkdirp');
  var rimraf = require('rimraf');

  var DIST = 'dist';
  rimraf.sync(DIST);

  var builddir = path.join(DIST, 'build');

  var builder = new Builder(__dirname).use(minify);
  builder.copyAssetsTo(builddir);
  builder.build(function (err, res) {
    if (err) throw err;

    mkdir(builddir);

    var js = res.require + res.js;
    fs.writeFileSync(path.join(builddir, 'build.js'), js);
    fs.writeFileSync(path.join(builddir, 'build.css'), res.css);
    fs.writeFileSync(
      path.join(DIST, 'index.html'),
      fs.readFileSync('index.html')
    );

    function copyAssets(dirName) {
      var dir = path.join(DIST, dirName);
      mkdir(dir);

      fs.readdirSync(dirName).forEach(function (f) {
        fs.writeFileSync(
          path.join(dir, f),
          fs.readFileSync(path.join(dirName, f))
        );
      });
    }
    copyAssets('img');
    copyAssets('audio');

    complete();
  });
});

// For this to work on Windows, patch jake as follows:
//
// jake/lib/watch_task.js:23
// - return item == filePath;
// + return item.split(/[\\\/]/).join('/') == filePath.split(/[\\\/]/).join('/');
//
// jake/lib/task/task.js:162
// + this._currentPrereqIndex = 0;
//
// jake/node_modules/utilities/lib/file.js:201
// - if (inclPat.test(p) && !exclPat.test(p)) {
// + if (p && inclPat.test(p) && !exclPat.test(p)) {
watchTask(['build'], function () {
  this.watchFiles.include('lib/*/template.html');

  this.watchFiles.exclude(/^build\b/);
  this.watchFiles.exclude(/^components\b/);
  this.watchFiles.exclude(/\btemplate\.js$/);
});
